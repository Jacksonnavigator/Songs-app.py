{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4Fn43vKcpU6b"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import torch\n",
        "from transformers import BertTokenizer, BertModel\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "# Load pre-trained BERT tokenizer and model\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "model = BertModel.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Read song data from the CSV file\n",
        "songs = []\n",
        "with open('SONGS2.csv', 'r') as file:\n",
        "    reader = csv.DictReader(file)\n",
        "    for row in reader:\n",
        "        songs.append(row)\n",
        "\n",
        "# Encode the descriptions and generate BERT embeddings\n",
        "embeddings = []\n",
        "for row in songs:\n",
        "    description = row['DESCRIPTION']\n",
        "    # Tokenize the description\n",
        "    tokens = tokenizer.encode(description, add_special_tokens=True)\n",
        "    # Convert tokens to tensors\n",
        "    input_ids = torch.tensor(tokens).unsqueeze(0)\n",
        "    # Generate BERT embeddings\n",
        "    with torch.no_grad():\n",
        "        outputs = model(input_ids)\n",
        "        embeddings.append(outputs.last_hidden_state.mean(dim=1).squeeze().numpy())\n",
        "\n",
        "# Reshape the embeddings\n",
        "embeddings = torch.tensor(embeddings)\n",
        "\n",
        "# Compute cosine similarity matrix\n",
        "similarity_matrix = cosine_similarity(embeddings)\n",
        "\n",
        "# Now, suppose a user likes \"Sina\". We can recommend another song based on cosine similarity.\n",
        "liked_song = \"Mwamba Wenye Imara\"\n",
        "liked_song_index = next(index for index, song in enumerate(songs) if song['TITLE'] == liked_song)\n",
        "\n",
        "# Find the most similar songs\n",
        "similar_song_indices = similarity_matrix[liked_song_index].argsort()[::-1][1:4]  # Exclude the liked song itself\n",
        "recommended_songs = [songs[index]['TITLE'] for index in similar_song_indices]\n",
        "\n",
        "print(\"Because you liked \" + liked_song + \", we recommend: \" + \", \".join(recommended_songs))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rT0INqvhpWjK",
        "outputId": "9c4a7170-49ea-427b-dc33-fc824b479d9e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Because you liked Mwamba Wenye Imara, we recommend: Nimekupata Yesu, Napokea Kwako, Aje\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AZuGdd5ApWfm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "k0tbV4BLpWbC"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
